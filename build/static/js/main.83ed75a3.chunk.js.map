{"version":3,"sources":["components/MyTitleContainer/TitlePagination.tsx","common/effect/Fadein.tsx","components/MyTitleContainer/MyTitle.tsx","components/Banner.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TitlePagination","props","selected","styles","dot","cursor","height","width","margin","backgroundColor","borderRadius","display","transition","activeDot","style","Fadein","animation","useSpring","opacity","from","Fragment","div","children","myTitles","MyTitle","React","useState","index","setIndex","useEffect","setTimeout","console","log","slide","color","alignItems","justifyContent","fontFamily","fontSize","map","title","i","flexDirection","Array","length","fill","_","onClick","Banner","className","x","y","text-anchor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4QAmCeA,EA7ByC,SAACC,GAAW,IAC3DC,EAAYD,EAAZC,SACDC,EAAS,CACbC,IAAK,CACHC,OAAQ,UACRC,OAAQ,OACRC,MAAO,OACPC,OAAQ,oBACRC,gBAAiB,UACjBC,aAAc,MACdC,QAAS,eACTC,WAAY,6BAEdC,UAAW,CACTR,OAAQ,UACRC,OAAQ,OACRC,MAAO,OACPC,OAAQ,oBACRC,gBAAiB,UACjBC,aAAc,MACdC,QAAS,eACTC,WAAY,8BAGhB,OACE,yBAAKE,MAAOZ,EAAUC,EAAOU,UAAYV,EAAOC,O,OCfrCW,EAbU,SAACd,GACxB,IAAMe,EAAYC,YAAU,CAC1BC,QAAS,GACTC,KAAM,CAACD,QAAS,KAGlB,OACE,kBAAC,IAAME,SAAP,KACE,kBAAC,IAASC,IAAV,CAAcP,MAAOE,GAAYf,EAAMqB,YCPvCC,EAAW,CACf,6BACA,oBACA,qDAqDaC,EAlDW,WAAO,IAAD,EACJC,IAAMC,SAAS,GADX,mBACvBC,EADuB,KAChBC,EADgB,KAK9BH,IAAMI,WAAU,WACdC,YAAW,WACT,OAAOH,GACL,KAAK,EAAGC,EAAS,GAAI,MACrB,KAAK,EAAGA,EAAS,GAAI,MACrB,KAAK,EAAGA,EAAS,MAElB,KACHG,QAAQC,IAAIL,MAEd,IAAMxB,EAAS,CACb8B,MAAO,CACLC,MAAO,OACPC,WAAY,QACZC,eAAgB,SAChBzB,QAAS,OACT0B,WAAY,kBACZC,SAAU,QAGd,OACE,kBAAC,IAAMlB,SAAP,KAEIG,EAASgB,KACP,SAACC,EAAOC,GAAR,OACGA,IAAMd,GACL,kBAAC,EAAD,KACE,0BAAMb,MAAOX,EAAO8B,OAAQO,OAKtC,yBAAK1B,MAAO,CAAE4B,cAAe,QAEzBC,MAAMpB,EAASqB,QAAQC,KAAK,GAAGN,KAAI,SAACO,EAAGL,GAAJ,OACjC,0BAAMM,QAAS,WArCvBnB,EAqC+Ca,KACrC,kBAAC,EAAD,CAAiBvC,SAAUuC,IAAMd,WCxBhCqB,EAhBU,SAAC/C,GAExB,OACE,kBAAC,IAAMmB,SAAP,KACE,yBAAK6B,UAAU,oBACb,yBAAKA,UAAU,UAAU1C,MAAM,OAAOD,OAAO,QAC3C,0BAAM4C,EAAE,MAAMC,EAAE,MAAOC,cAAY,UAAnC,WAIF,kBAAC,EAAD,SCPOC,MATf,WACE,OACE,kBAAC,IAAMjC,SAAP,KAEE,kBAAC,EAAD,QCGckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.83ed75a3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface TitlePaginationProps {\r\n  selected: boolean;\r\n  onClick?: () => void;\r\n}\r\nconst TitlePagination: React.FC<TitlePaginationProps> = (props) => {\r\n  const {selected} = props;\r\n  const styles = {\r\n    dot: {\r\n      cursor: 'pointer',\r\n      height: '10px',\r\n      width: '10px',\r\n      margin: '6vh 1.5vw 0 1.5vw',\r\n      backgroundColor: '#A47786',\r\n      borderRadius: '50%',\r\n      display: 'inline-block',\r\n      transition: 'backgroundColor 0.6s ease',\r\n    },\r\n    activeDot: {\r\n      cursor: 'pointer',\r\n      height: '10px',\r\n      width: '10px',\r\n      margin: '6vh 1.5vw 0 1.5vw',\r\n      backgroundColor: '#F1E6C8',\r\n      borderRadius: '50%',\r\n      display: 'inline-block',\r\n      transition: 'backgroundColor 0.6s ease',\r\n    },\r\n  };\r\n  return (\r\n    <div style={selected? styles.activeDot : styles.dot}/>\r\n  );\r\n};\r\n\r\nexport default TitlePagination;","import React from 'react';\r\nimport {useSpring, animated} from 'react-spring';\r\n\r\nconst Fadein: React.FC = (props) => {\r\n  const animation = useSpring({\r\n    opacity: 0.8,\r\n    from: {opacity: 0},\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <animated.div style={animation}>{props.children}</animated.div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Fadein;\r\n\r\n","import React from 'react';\r\nimport TitlePagination from './TitlePagination';\r\nimport Fadein from '../../common/effect/Fadein';\r\n\r\nconst myTitles = [\r\n  \"A business systems analyst\",\r\n  \"An UI/UX designer\",\r\n  \"A creative web developer with a focus on frontend\",\r\n];\r\n\r\nconst MyTitle: React.FC = () => {\r\n  const [index, setIndex] = React.useState(2);\r\n  const handleChangeIndex = (idx: number) => {\r\n    setIndex(idx);\r\n  }\r\n  React.useEffect(() => {\r\n    setTimeout(() => {\r\n      switch(index){\r\n        case 0: setIndex(1); break;\r\n        case 1: setIndex(2); break;\r\n        case 2: setIndex(0); break;\r\n      }\r\n    }, 4000)\r\n    console.log(index);\r\n  })\r\n  const styles = {\r\n    slide: {\r\n      color: '#fff',\r\n      alignItems: 'right',\r\n      justifyContent: 'center',\r\n      display: 'flex',\r\n      fontFamily: 'Julius Sans One',\r\n      fontSize: '2vw',\r\n    },\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        myTitles.map(\r\n          (title, i) => (\r\n            (i === index) && \r\n              <Fadein>\r\n                <span style={styles.slide}>{title}</span>\r\n              </Fadein>\r\n          )\r\n        )\r\n      }\r\n      <div style={{ flexDirection: 'row' }}>\r\n        {\r\n          Array(myTitles.length).fill(0).map((_, i) => (\r\n            <span onClick={() => handleChangeIndex(i)}>\r\n              <TitlePagination selected={i === index}/>\r\n            </span>\r\n          ))\r\n        }        \r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default MyTitle;","/*\r\n*\r\n* A business systems analyst\r\n* An UI/UX designer\r\n* A creative frontend developer\r\n* \r\n*/\r\nimport React from 'react';\r\nimport '../style/Banner.css';\r\nimport MyTitle from './MyTitleContainer/MyTitle';\r\n\r\nconst Banner: React.FC = (props) => {\r\n  const a = 10;\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"banner-container\">\r\n        <svg className=\"animate\" width=\"100%\" height=\"20vw\">\r\n          <text x=\"50%\" y=\"70%\"  text-anchor=\"middle\"  >\r\n            nga vu\r\n          </text>\r\n        </svg>\r\n        <MyTitle/>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Banner;","import React from 'react';\nimport './App.css';\nimport TheHeader from './common/layout/header';\nimport Banner from './components/Banner';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      {/* <TheHeader /> */}\n      <Banner /> \n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}